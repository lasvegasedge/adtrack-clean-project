import { useState, useEffect, useRef } from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { 
  FormControl, 
  FormDescription, 
  FormField, 
  FormItem, 
  FormLabel, 
  FormMessage 
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  RefreshCw, 
  Mail, 
  Save, 
  RotateCcw, 
  Eye, 
  Send, 
  HelpCircle 
} from "lucide-react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

// Define email template schema
const emailTemplateSchema = z.object({
  id: z.number().optional(),
  templateType: z.string(),
  subject: z.string().min(1, "Subject is required"),
  textContent: z.string().min(1, "Text content is required"),
  htmlContent: z.string().min(1, "HTML content is required"),
  isCustomized: z.boolean().optional(),
});

type EmailTemplateFormValues = z.infer<typeof emailTemplateSchema>;

// Test email schema
const testEmailSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
});

type TestEmailFormValues = z.infer<typeof testEmailSchema>;

// Define email template types and friendly names
const templateTypes = [
  { id: "passwordReset", name: "Password Reset" },
  { id: "roiAlert", name: "ROI Alert" },
  { id: "campaignReminder", name: "Campaign Reminder" },
  { id: "weeklyReport", name: "Weekly Report" },
  { id: "verifyEmail", name: "Email Verification" },
  { id: "newAccountRequest", name: "New Account Request" },
  { id: "accountApproved", name: "Account Approved" },
  { id: "accountRejected", name: "Account Rejected" },
];

// Define template variables by type
const templateVariables: Record<string, { name: string, description: string, example: string }[]> = {
  passwordReset: [
    { name: "username", description: "User's name or email", example: "john.doe@example.com" },
    { name: "resetLink", description: "Password reset URL", example: "https://adtrack.online/reset-password?token=xyz123" },
  ],
  roiAlert: [
    { name: "campaignName", description: "Name of the campaign", example: "Summer Facebook Promotion" },
    { name: "roi", description: "ROI percentage value", example: "24.5" },
  ],
  campaignReminder: [
    { name: "campaignName", description: "Name of the campaign", example: "Google Ads Q2" },
    { name: "daysInactive", description: "Number of days inactive", example: "14" },
  ],
  weeklyReport: [
    { name: "businessName", description: "Name of the business", example: "Acme Inc." },
    { name: "totalCampaigns", description: "Number of active campaigns", example: "5" },
    { name: "averageRoi", description: "Average ROI percentage", example: "32.7" },
  ],
  verifyEmail: [
    { name: "username", description: "User's name or email", example: "business@example.com" },
    { name: "verificationLink", description: "Email verification URL", example: "https://adtrack.online/verify-email?token=abc123" },
  ],
  newAccountRequest: [
    { name: "username", description: "Applicant's email address", example: "business@example.com" },
    { name: "phoneNumber", description: "Applicant's phone number", example: "555-123-4567" },
    { name: "approvalUrl", description: "URL to approval dashboard", example: "https://adtrack.online/admin?tab=approvals" },
  ],
  accountApproved: [
    { name: "username", description: "User's name or email", example: "business@example.com" },
    { name: "loginUrl", description: "Login URL", example: "https://adtrack.online/login" },
  ],
  accountRejected: [
    { name: "username", description: "User's name or email", example: "business@example.com" },
    { name: "reason", description: "Reason for rejection", example: "Incomplete business information provided." },
  ],
};

// Default templates for when no customized templates exist
const defaultTemplates: Record<string, any> = {
  'accountApproved': {
    subject: "Congratulations! Your AdTrack Account is Approved",
    textContent: "WELCOME TO ADTRACK, ${username}!\n\nGreat news! Your account has been approved and is now ready to use.\n\nNEXT STEPS:\n1. Log in to your account\n2. Complete your business profile\n3. Add your first advertising campaign\n4. Explore the ROI tracking dashboard\n\nTo log in now, visit: ${loginUrl}\n\nKEY FEATURES AVAILABLE TO YOU:\n\n- ROI Tracking: Monitor the performance of all your advertising campaigns in real-time.\n- Competitor Analysis: See how your campaigns perform against similar businesses in your area.\n- AI Recommendations: Get smart suggestions to optimize your advertising budget and strategy.\n- Marketing Insights: Translate complex data into actionable business intelligence.\n\nIf you have any questions, our support team is here to help you get started.\n\n© 2025 AdTrack. All rights reserved.",
    htmlContent: "<div style=\"font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;\">\n  <div style=\"background-color: #3f57f5; padding: 20px; text-align: center;\">\n    <h1 style=\"color: white; margin: 0;\">Account Approved</h1>\n  </div>\n  \n  <div style=\"padding: 20px; border: 1px solid #e1e1e1; border-top: none;\">\n    <h2>Welcome to AdTrack, ${username}!</h2>\n    \n    <p>Great news! Your account has been approved and is now ready to use.</p>\n    \n    <div style=\"background-color: #f7f9fc; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #4caf50;\">\n      <h3 style=\"margin-top: 0;\">Next Steps:</h3>\n      <ol>\n        <li>Log in to your account</li>\n        <li>Complete your business profile</li>\n        <li>Add your first advertising campaign</li>\n        <li>Explore the ROI tracking dashboard</li>\n      </ol>\n    </div>\n    \n    <div style=\"text-align: center; margin: 25px 0;\">\n      <a href=\"${loginUrl}\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #3f57f5; color: white;\">Log In Now</a>\n    </div>\n    \n    <h3>Key Features Available to You:</h3>\n    <ul>\n      <li><strong>ROI Tracking:</strong> Monitor the performance of all your advertising campaigns in real-time.</li>\n      <li><strong>Competitor Analysis:</strong> See how your campaigns perform against similar businesses in your area.</li>\n      <li><strong>AI Recommendations:</strong> Get smart suggestions to optimize your advertising budget and strategy.</li>\n      <li><strong>Marketing Insights:</strong> Translate complex data into actionable business intelligence.</li>\n    </ul>\n    \n    <p>If you have any questions, our support team is here to help you get started.</p>\n  </div>\n  \n  <div style=\"text-align: center; padding: 15px; font-size: 12px; color: #666;\">\n    © 2025 AdTrack. All rights reserved.\n  </div>\n</div>"
  },
  'newAccountRequest': {
    subject: "New AdTrack Account Request Requires Your Approval",
    textContent: "ACTION REQUIRED: New Account Request on AdTrack Platform\n\nA new business has registered for AdTrack and is awaiting your approval.\n\nREQUEST DETAILS:\n- Email Address: ${username}\n- Phone Number: ${phoneNumber}\n\nTo APPROVE this request, visit: ${approvalUrl}\nTo REJECT this request, visit: ${approvalUrl}\n\nYou can also review this request in detail on the Admin Dashboard.\n\nSECURITY NOTE: All approval actions are securely logged for audit purposes. For security reasons, this approval link will expire in 24 hours.\n\nThis is an automated message from the AdTrack platform.\n© 2025 AdTrack. All rights reserved.",
    htmlContent: "<div style=\"font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;\">\n  <div style=\"background-color: #3f57f5; padding: 20px; text-align: center;\">\n    <h1 style=\"color: white; margin: 0;\">Action Required: New Account Request</h1>\n  </div>\n  \n  <div style=\"padding: 20px; border: 1px solid #e1e1e1; border-top: none;\">\n    <h2>New Account Request</h2>\n    \n    <p>A new business has requested to join the AdTrack platform and is awaiting your approval.</p>\n    \n    <div style=\"background-color: #f7f9fc; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3f57f5;\">\n      <h3 style=\"margin-top: 0;\">Request Details</h3>\n      <p><strong>Email Address:</strong> ${username}</p>\n      <p><strong>Phone Number:</strong> ${phoneNumber}</p>\n    </div>\n    \n    <div style=\"text-align: center; margin: 25px 0;\">\n      <a href=\"${approvalUrl}?action=approve\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #4caf50; color: white; margin: 0 10px;\">Approve Account</a>\n      <a href=\"${approvalUrl}?action=reject\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #f44336; color: white; margin: 0 10px;\">Reject Account</a>\n    </div>\n    \n    <p>You can also review this request in detail on the <a href=\"${approvalUrl}\" style=\"color: #3f57f5; text-decoration: none;\">Admin Dashboard</a>.</p>\n    \n    <div style=\"background-color: #fffde7; padding: 12px; border-radius: 4px; margin: 20px 0; font-size: 14px;\">\n      <strong>Security Note:</strong> All approval actions are securely logged for audit purposes. For security reasons, this approval link will expire in 24 hours.\n    </div>\n  </div>\n  \n  <div style=\"text-align: center; padding: 15px; font-size: 12px; color: #666;\">\n    © 2025 AdTrack. All rights reserved.\n  </div>\n</div>"
  },
  'passwordReset': {
    subject: "Reset Your AdTrack Password",
    textContent: "You requested a password reset for your AdTrack account.\n\nTo reset your password, please click the following link:\n${resetLink}\n\nThis link will expire in 1 hour for security reasons.\n\nIf you did not request a password reset, please ignore this email or contact our support team if you have concerns about your account security.\n\n© 2025 AdTrack. All rights reserved.",
    htmlContent: "<div style=\"font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;\">\n  <div style=\"background-color: #3f57f5; padding: 20px; text-align: center;\">\n    <h1 style=\"color: white; margin: 0;\">Reset Your Password</h1>\n  </div>\n  \n  <div style=\"padding: 20px; border: 1px solid #e1e1e1; border-top: none;\">\n    <p>You requested a password reset for your AdTrack account.</p>\n    \n    <div style=\"text-align: center; margin: 30px 0;\">\n      <a href=\"${resetLink}\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #3f57f5; color: white;\">Reset Password</a>\n    </div>\n    \n    <p>Or copy and paste this link into your browser:</p>\n    <p style=\"background-color: #f7f9fc; padding: 10px; border-radius: 4px; font-size: 14px; word-break: break-all;\">\n      ${resetLink}\n    </p>\n    \n    <div style=\"background-color: #fff8e1; padding: 10px; border-radius: 4px; margin: 20px 0; border-left: 4px solid #ffca28;\">\n      <p style=\"margin: 0;\"><strong>Important:</strong> This link will expire in 1 hour for security reasons.</p>\n    </div>\n    \n    <p>If you did not request a password reset, please ignore this email or contact our support team if you have concerns about your account security.</p>\n  </div>\n  \n  <div style=\"text-align: center; padding: 15px; font-size: 12px; color: #666;\">\n    © 2025 AdTrack | <span style=\"color: #3f57f5; font-weight: 500;\">AI-Powered Solutions</span>. All rights reserved.\n  </div>\n</div>"
  },
  'roiAlert': {
    subject: "ROI Alert: ${campaignName} Performance Update",
    textContent: "ROI ALERT: CAMPAIGN PERFORMANCE UPDATE\n\nYour campaign \"${campaignName}\" has reached a Return on Investment (ROI) of ${roi}%.\n\nCAMPAIGN DETAILS:\n- Campaign Name: ${campaignName}\n- Current ROI: ${roi}%\n- Industry Average: 72%\n\nLog in to your AdTrack dashboard to view detailed performance metrics and AI-generated optimization suggestions.\n\nThis automated alert is part of AdTrack's real-time performance monitoring system.\n\n© 2025 AdTrack. All rights reserved.",
    htmlContent: "<div style=\"font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;\">\n  <div style=\"background-color: #3f57f5; padding: 20px; text-align: center;\">\n    <h1 style=\"color: white; margin: 0;\">ROI Performance Alert</h1>\n  </div>\n  \n  <div style=\"padding: 20px; border: 1px solid #e1e1e1; border-top: none;\">\n    <h2>Campaign Performance Update</h2>\n    \n    <div style=\"background-color: #f0f7ff; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3f57f5;\">\n      <h3 style=\"margin-top: 0; color: #3f57f5;\">${campaignName} Campaign</h3>\n      <p style=\"font-size: 18px;\">Current ROI: <strong style=\"color: #3f57f5; font-size: 22px;\">${roi}%</strong></p>\n      <p>Industry Average: 72%</p>\n    </div>\n    \n    <p>Your advertising campaign \"${campaignName}\" has reached the ROI threshold you've set for alerts.</p>\n    \n    <div style=\"text-align: center; margin: 25px 0;\">\n      <a href=\"https://adtrack.online/dashboard\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #3f57f5; color: white;\">View Performance Details</a>\n    </div>\n    \n    <p>Our AI analysis system has generated optimization suggestions to help you further improve your campaign performance.</p>\n  </div>\n  \n  <div style=\"text-align: center; padding: 15px; font-size: 12px; color: #666;\">\n    This automated alert is part of AdTrack's real-time performance monitoring system.<br>\n    © 2025 AdTrack | <span style=\"color: #3f57f5; font-weight: 500;\">AI-Powered Solutions</span>. All rights reserved.\n  </div>\n</div>"
  },
  'campaignReminder': {
    subject: "Action Required: Update Your ${campaignName} Campaign",
    textContent: "CAMPAIGN UPDATE REMINDER\n\nYour advertising campaign \"${campaignName}\" hasn't been updated in ${daysInactive} days.\n\nTo maintain accurate ROI calculations and performance tracking, please login to your AdTrack dashboard to:\n1. Update your campaign status\n2. Record recent results\n3. Adjust budget allocations if needed\n\nRegular updates help our AI system provide more accurate recommendations and competitive analysis.\n\n© 2025 AdTrack. All rights reserved.",
    htmlContent: "<div style=\"font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;\">\n  <div style=\"background-color: #3f57f5; padding: 20px; text-align: center;\">\n    <h1 style=\"color: white; margin: 0;\">Campaign Update Reminder</h1>\n  </div>\n  \n  <div style=\"padding: 20px; border: 1px solid #e1e1e1; border-top: none;\">\n    <div style=\"background-color: #fff8e1; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffa000;\">\n      <h3 style=\"margin-top: 0; color: #e65100;\">Action Required</h3>\n      <p>Your advertising campaign <strong>\"${campaignName}\"</strong> hasn't been updated in <strong>${daysInactive} days</strong>.</p>\n    </div>\n    \n    <p>To maintain accurate ROI calculations and performance tracking, please update your campaign information.</p>\n    \n    <h3>Required Updates:</h3>\n    <ul>\n      <li>Current campaign status</li>\n      <li>Recent performance results</li>\n      <li>Budget adjustments (if any)</li>\n    </ul>\n    \n    <div style=\"text-align: center; margin: 25px 0;\">\n      <a href=\"https://adtrack.online/dashboard\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #3f57f5; color: white;\">Update Campaign Now</a>\n    </div>\n    \n    <p style=\"color: #666; font-style: italic;\">Regular updates help our AI system provide more accurate recommendations and competitive analysis for your business.</p>\n  </div>\n  \n  <div style=\"text-align: center; padding: 15px; font-size: 12px; color: #666;\">\n    This is an automated reminder from the AdTrack platform.<br>\n    © 2025 AdTrack | <span style=\"color: #3f57f5; font-weight: 500;\">AI-Powered Solutions</span>. All rights reserved.\n  </div>\n</div>"
  },
  'weeklyReport': {
    subject: "Your Weekly AdTrack Performance Report: ${businessName}",
    textContent: "WEEKLY PERFORMANCE REPORT: ${businessName}\n\nSummary for the week:\n\nADVERTISING PERFORMANCE:\n- Active Campaigns: ${totalCampaigns}\n- Average ROI: ${averageRoi}%\n- Best Performing: Facebook Ads (182% ROI)\n- Needs Attention: Google Ads (24% ROI)\n\nCOMPETITOR ANALYSIS:\n- Your Rank: 3rd of 12 similar businesses\n- Industry Average ROI: 72%\n- Top Performer: Main Street Bakery (192% ROI)\n\nView your detailed report with AI-generated recommendations by logging into your AdTrack dashboard.\n\n© 2025 AdTrack. All rights reserved.",
    htmlContent: "<div style=\"font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;\">\n  <div style=\"background-color: #3f57f5; padding: 20px; text-align: center;\">\n    <h1 style=\"color: white; margin: 0;\">Weekly Performance Report</h1>\n  </div>\n  \n  <div style=\"padding: 20px; border: 1px solid #e1e1e1; border-top: none;\">\n    <h2>${businessName}</h2>\n    <p>Weekly Performance Report</p>\n    \n    <div style=\"margin: 25px 0;\">\n      <h3 style=\"border-bottom: 1px solid #eee; padding-bottom: 8px; color: #3f57f5;\">Advertising Performance</h3>\n      <div style=\"display: flex; justify-content: space-between; flex-wrap: wrap;\">\n        <div style=\"min-width: 120px; padding: 10px; margin-bottom: 15px;\">\n          <div style=\"font-size: 14px; color: #666;\">Active Campaigns</div>\n          <div style=\"font-size: 24px; font-weight: bold; color: #333;\">${totalCampaigns}</div>\n        </div>\n        <div style=\"min-width: 120px; padding: 10px; margin-bottom: 15px;\">\n          <div style=\"font-size: 14px; color: #666;\">Average ROI</div>\n          <div style=\"font-size: 24px; font-weight: bold; color: #3f57f5;\">${averageRoi}%</div>\n        </div>\n        <div style=\"min-width: 120px; padding: 10px; margin-bottom: 15px;\">\n          <div style=\"font-size: 14px; color: #666;\">Industry Rank</div>\n          <div style=\"font-size: 24px; font-weight: bold; color: #333;\">3 of 12</div>\n        </div>\n      </div>\n    </div>\n    \n    <div style=\"margin: 25px 0;\">\n      <h3 style=\"border-bottom: 1px solid #eee; padding-bottom: 8px; color: #3f57f5;\">Campaign Highlights</h3>\n      <div style=\"margin-bottom: 15px;\">\n        <div style=\"background-color: #e8f5e9; padding: 12px; border-radius: 4px; margin-bottom: 10px;\">\n          <span style=\"font-weight: bold;\">Best Performing:</span> Facebook Ads <span style=\"float: right; font-weight: bold; color: #2e7d32;\">182% ROI</span>\n        </div>\n        <div style=\"background-color: #ffebee; padding: 12px; border-radius: 4px;\">\n          <span style=\"font-weight: bold;\">Needs Attention:</span> Google Ads <span style=\"float: right; font-weight: bold; color: #c62828;\">24% ROI</span>\n        </div>\n      </div>\n    </div>\n    \n    <div style=\"text-align: center; margin: 30px 0;\">\n      <a href=\"https://adtrack.online/dashboard\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #3f57f5; color: white;\">View Full Report</a>\n    </div>\n    \n    <p style=\"color: #666; font-style: italic;\">Your detailed report includes AI-generated recommendations to help optimize your advertising budget and improve ROI.</p>\n  </div>\n  \n  <div style=\"text-align: center; padding: 15px; font-size: 12px; color: #666;\">\n    This is an automated report from the AdTrack platform.<br>\n    © 2025 AdTrack | <span style=\"color: #3f57f5; font-weight: 500;\">AI-Powered Solutions</span>. All rights reserved.\n  </div>\n</div>"
  },
  'emailVerification': {
    subject: "Verify Your AdTrack Email Address",
    textContent: "Welcome to AdTrack!\n\nPlease verify your email address by clicking on the following link:\n${verificationLink}\n\nAfter verification, your account will be reviewed by our admin team. You'll receive another email once your account has been approved.\n\nIf you did not create an account with AdTrack, please disregard this email.\n\n© 2025 AdTrack. All rights reserved.",
    htmlContent: "<div style=\"font-family: 'Segoe UI', sans-serif; max-width: 600px; margin: 0 auto;\">\n  <div style=\"background-color: #3f57f5; padding: 20px; text-align: center;\">\n    <h1 style=\"color: white; margin: 0;\">Email Verification</h1>\n  </div>\n  \n  <div style=\"padding: 20px; border: 1px solid #e1e1e1; border-top: none;\">\n    <h2>Welcome to AdTrack!</h2>\n    <p>Thank you for registering. To complete your account setup, please verify your email address.</p>\n    \n    <div style=\"text-align: center; margin: 30px 0;\">\n      <a href=\"${verificationLink}\" style=\"display: inline-block; padding: 12px 25px; border-radius: 4px; text-decoration: none; font-weight: bold; background-color: #3f57f5; color: white;\">Verify Email Address</a>\n    </div>\n    \n    <p>Or copy and paste this link into your browser:</p>\n    <p style=\"background-color: #f7f9fc; padding: 10px; border-radius: 4px; font-size: 14px; word-break: break-all;\">\n      ${verificationLink}\n    </p>\n    \n    <div style=\"background-color: #f0f7ff; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3f57f5;\">\n      <p style=\"margin: 0;\"><strong>Next Steps:</strong> After verification, your account will be reviewed by our admin team. You'll receive another email once your account has been approved.</p>\n    </div>\n    \n    <p style=\"color: #666;\">If you did not create an account with AdTrack, please disregard this email.</p>\n  </div>\n  \n  <div style=\"text-align: center; padding: 15px; font-size: 12px; color: #666;\">\n    © 2025 AdTrack | <span style=\"color: #3f57f5; font-weight: 500;\">AI-Powered Solutions</span>. All rights reserved.\n  </div>\n</div>"
  }
};

export default function EmailTemplates() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedTemplateType, setSelectedTemplateType] = useState<string>("passwordReset");
  const [previewMode, setPreviewMode] = useState<"html" | "text">("html");
  const [showVariableReference, setShowVariableReference] = useState(false);
  const [sendingTestEmail, setSendingTestEmail] = useState(false);
  const previewIframeRef = useRef<HTMLIFrameElement>(null);
  
  // Fetch email templates
  const { 
    data: templates, 
    isLoading,
    error 
  } = useQuery({
    queryKey: ['/api/admin/email-templates'],
    queryFn: async () => {
      const response = await fetch('/api/admin/email-templates');
      if (!response.ok) {
        throw new Error('Failed to fetch email templates');
      }
      return response.json();
    },
    staleTime: 60000, // 1 minute
  });
  
  // Create form instance
  const form = useForm<EmailTemplateFormValues>({
    resolver: zodResolver(emailTemplateSchema),
    defaultValues: {
      templateType: selectedTemplateType,
      subject: '',
      textContent: '',
      htmlContent: '',
      isCustomized: false,
    }
  });
  
  // Create test email form
  const testEmailForm = useForm<TestEmailFormValues>({
    resolver: zodResolver(testEmailSchema),
    defaultValues: {
      email: "",
    }
  });
  
  // Get the selected template
  const selectedTemplate = templates?.find(
    (template: any) => template.templateType === selectedTemplateType
  );
  
  // Get variables for selected template type
  const currentTemplateVariables = templateVariables[selectedTemplateType] || [];
  
  // Load template data when selected template changes
  useEffect(() => {
    if (selectedTemplate) {
      // Selected template exists in the database
      form.reset({
        id: selectedTemplate.id,
        templateType: selectedTemplate.templateType,
        subject: selectedTemplate.subject,
        textContent: selectedTemplate.textContent,
        htmlContent: selectedTemplate.htmlContent,
        isCustomized: true,
      });
    } else if (defaultTemplates[selectedTemplateType]) {
      // Use default template if no customized version exists
      const defaultTemplate = defaultTemplates[selectedTemplateType];
      form.reset({
        templateType: selectedTemplateType,
        subject: defaultTemplate.subject,
        textContent: defaultTemplate.textContent,
        htmlContent: defaultTemplate.htmlContent,
        isCustomized: false,
      });
    } else {
      // Fallback to empty template
      form.reset({
        templateType: selectedTemplateType,
        subject: "",
        textContent: "",
        htmlContent: "",
        isCustomized: false,
      });
    }
  }, [selectedTemplateType, selectedTemplate, templates, form]);
  
  // Update preview iframe when HTML content changes
  useEffect(() => {
    const updatePreview = () => {
      if (previewIframeRef.current) {
        const iframe = previewIframeRef.current;
        const htmlContent = form.watch('htmlContent');
        
        if (iframe.contentWindow) {
          iframe.contentWindow.document.open();
          iframe.contentWindow.document.write(htmlContent);
          iframe.contentWindow.document.close();
        }
      }
    };
    
    updatePreview();
    
    // Set up a subscription to watch for changes
    const subscription = form.watch((value, { name }) => {
      if (name === 'htmlContent') {
        updatePreview();
      }
    });
    
    return () => subscription.unsubscribe();
  }, [form, previewIframeRef]);
  
  // Save template mutation
  const updateTemplateMutation = useMutation({
    mutationFn: async (data: EmailTemplateFormValues) => {
      const response = await apiRequest(
        "POST",
        "/api/admin/email-templates",
        data
      );
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to save template: ${errorText}`);
      }
      
      return await response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Template saved",
        description: "The email template has been updated successfully.",
      });
      
      // Update cache with the newly saved template
      queryClient.setQueryData(
        ['/api/admin/email-templates'],
        (oldData: any) => {
          if (!oldData) return [data];
          
          const filteredData = oldData.filter(
            (template: any) => template.templateType !== data.templateType
          );
          
          return [...filteredData, data];
        }
      );
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Reset template mutation
  const resetTemplateMutation = useMutation({
    mutationFn: async (id: number) => {
      const response = await apiRequest(
        "DELETE",
        `/api/admin/email-templates/${id}`,
        {}
      );
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to reset template: ${errorText}`);
      }
      
      return id;
    },
    onSuccess: (id) => {
      toast({
        title: "Template reset",
        description: "The email template has been reset to default.",
      });
      
      // Update cache by removing the template (will fall back to default)
      queryClient.setQueryData(
        ['/api/admin/email-templates'],
        (oldData: any) => {
          if (!oldData) return [];
          return oldData.filter((template: any) => template.id !== id);
        }
      );
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
  
  // Send test email mutation
  const sendTestEmailMutation = useMutation({
    mutationFn: async (data: TestEmailFormValues) => {
      const formData = form.getValues();
      const payload = {
        email: data.email,
        subject: formData.subject,
        textContent: formData.textContent,
        htmlContent: formData.htmlContent,
      };
      
      const response = await apiRequest(
        "POST",
        "/api/admin/email-templates/test",
        payload
      );
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to send test email: ${errorText}`);
      }
      
      return await response.json();
    },
    onSuccess: () => {
      toast({
        title: "Test email sent",
        description: "A test email has been sent to the specified address.",
      });
      setSendingTestEmail(false);
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
      setSendingTestEmail(false);
    },
  });
  
  const onSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const values = form.getValues();
    updateTemplateMutation.mutate(values);
  };
  
  const handleReset = () => {
    if (selectedTemplate?.id) {
      resetTemplateMutation.mutate(selectedTemplate.id);
    }
  };
  
  const handleTemplateTypeChange = (value: string) => {
    setSelectedTemplateType(value);
  };
  
  const sendTestEmail = async (data: TestEmailFormValues) => {
    setSendingTestEmail(true);
    sendTestEmailMutation.mutate(data);
  };
  
  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Email Templates</CardTitle>
          <CardDescription>Customize system email templates</CardDescription>
        </CardHeader>
        <CardContent className="py-10">
          <div className="flex justify-center">
            <RefreshCw className="h-8 w-8 animate-spin text-primary" />
          </div>
        </CardContent>
      </Card>
    );
  }
  
  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Email Templates</CardTitle>
          <CardDescription>Customize system email templates</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center text-red-500">
            Failed to load email templates. Please try again.
          </div>
          <Button 
            variant="outline" 
            onClick={() => queryClient.invalidateQueries({ queryKey: ['/api/admin/email-templates'] })}
            className="mt-2 mx-auto block"
          >
            <RefreshCw className="mr-2 h-4 w-4" />
            Retry
          </Button>
        </CardContent>
      </Card>
    );
  }
  
  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Mail className="mr-2 h-5 w-5" />
            <CardTitle>Email Templates</CardTitle>
          </div>
          <div className="flex space-x-2">
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="outline" size="sm" onClick={() => setShowVariableReference(!showVariableReference)}>
                    <HelpCircle className="h-4 w-4 mr-1" />
                    Variables
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  Show available template variables
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
            
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline" size="sm">
                  <Eye className="h-4 w-4 mr-1" />
                  Preview
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-3xl">
                <DialogHeader>
                  <DialogTitle>Email Preview</DialogTitle>
                  <DialogDescription>
                    Preview how the email will appear to recipients
                  </DialogDescription>
                </DialogHeader>
                
                <Tabs defaultValue="html" className="mt-2">
                  <TabsList>
                    <TabsTrigger value="html" onClick={() => setPreviewMode("html")}>HTML View</TabsTrigger>
                    <TabsTrigger value="text" onClick={() => setPreviewMode("text")}>Text View</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="html" className="min-h-[400px]">
                    <div className="border rounded-md overflow-hidden bg-white">
                      <iframe 
                        ref={previewIframeRef} 
                        className="w-full min-h-[400px]"
                        title="Email HTML Preview"
                      />
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="text">
                    <div className="border rounded-md p-4 bg-gray-50 font-mono text-sm whitespace-pre-wrap min-h-[400px] overflow-auto">
                      {form.watch('textContent')}
                    </div>
                  </TabsContent>
                </Tabs>
                
                <DialogFooter className="mt-4">
                  <DialogClose asChild>
                    <Button variant="secondary">Close Preview</Button>
                  </DialogClose>
                </DialogFooter>
              </DialogContent>
            </Dialog>
            
            <Dialog>
              <DialogTrigger asChild>
                <Button variant="outline" size="sm">
                  <Send className="h-4 w-4 mr-1" />
                  Test
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Send Test Email</DialogTitle>
                  <DialogDescription>
                    Send a test version of this email template to any address
                  </DialogDescription>
                </DialogHeader>
                
                <form onSubmit={testEmailForm.handleSubmit(sendTestEmail)}>
                  <FormField
                    control={testEmailForm.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem className="mb-4">
                        <FormLabel>Email Address</FormLabel>
                        <FormControl>
                          <Input placeholder="Enter email address" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <DialogFooter className="mt-4 gap-2">
                    <DialogClose asChild>
                      <Button variant="secondary" type="button">Cancel</Button>
                    </DialogClose>
                    <Button 
                      type="submit" 
                      disabled={sendingTestEmail || sendTestEmailMutation.isPending}
                    >
                      {sendingTestEmail && <RefreshCw className="mr-2 h-4 w-4 animate-spin" />}
                      Send Test Email
                    </Button>
                  </DialogFooter>
                </form>
              </DialogContent>
            </Dialog>
          </div>
        </div>
        <CardDescription>Customize system email templates for various notifications</CardDescription>
      </CardHeader>
      
      <CardContent>
        <div className="grid gap-6">
          {showVariableReference && (
            <Card className="mb-4 bg-slate-50">
              <CardHeader className="py-3">
                <CardTitle className="text-base">Available Template Variables</CardTitle>
                <CardDescription>
                  Use these variables in your templates. They will be replaced with actual values when emails are sent.
                </CardDescription>
              </CardHeader>
              <CardContent className="py-3">
                {currentTemplateVariables.length === 0 ? (
                  <p className="text-sm text-muted-foreground">No variables available for this template type</p>
                ) : (
                  <div className="grid gap-2">
                    {currentTemplateVariables.map((variable) => (
                      <div key={variable.name} className="border rounded-md p-2 bg-white">
                        <div className="flex flex-col sm:flex-row sm:items-center justify-between">
                          <div>
                            <span className="font-mono bg-slate-100 px-1 py-0.5 rounded text-sm">${`{${variable.name}}`}</span>
                            <p className="text-sm text-muted-foreground mt-1">{variable.description}</p>
                          </div>
                          <div className="mt-2 sm:mt-0">
                            <span className="text-xs bg-blue-50 text-blue-700 px-2 py-1 rounded-full">
                              Example: {variable.example}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          )}
          
          <form onSubmit={onSubmit}>
            <div className="grid gap-4">
              <div className="grid gap-4 md:grid-cols-4">
                <FormField
                  control={form.control}
                  name="templateType"
                  render={({ field }) => (
                    <div className="space-y-2 col-span-4 md:col-span-2">
                      <FormLabel>Template Type</FormLabel>
                      <Select 
                        defaultValue={field.value} 
                        onValueChange={(value) => {
                          handleTemplateTypeChange(value);
                        }}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select template type" />
                        </SelectTrigger>
                        <SelectContent>
                          {templateTypes.map((type) => (
                            <SelectItem key={type.id} value={type.id}>
                              {type.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        {getTemplateDescription(selectedTemplateType)}
                      </FormDescription>
                    </div>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="subject"
                  render={({ field }) => (
                    <div className="space-y-2 col-span-4 md:col-span-2">
                      <FormLabel>Email Subject</FormLabel>
                      <FormControl>
                        <Input placeholder="Email subject line" {...field} />
                      </FormControl>
                      <FormMessage />
                    </div>
                  )}
                />
              </div>
              
              <Tabs defaultValue="text" className="mt-4">
                <TabsList>
                  <TabsTrigger value="text">Text Version</TabsTrigger>
                  <TabsTrigger value="html">HTML Version</TabsTrigger>
                </TabsList>
                
                <TabsContent value="text">
                  <FormField
                    control={form.control}
                    name="textContent"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Text Version</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Enter the plain text version of the email" 
                            className="min-h-[200px] font-mono"
                            {...field} 
                          />
                        </FormControl>
                        <FormDescription>
                          Plain text version of the email for clients that don't support HTML.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </TabsContent>
                
                <TabsContent value="html">
                  <FormField
                    control={form.control}
                    name="htmlContent"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>HTML Version</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Enter the HTML version of the email" 
                            className="min-h-[300px] font-mono"
                            {...field} 
                          />
                        </FormControl>
                        <FormDescription>
                          HTML version of the email for rich formatting.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </TabsContent>
              </Tabs>
              
              <div className="flex justify-between mt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleReset}
                  disabled={!selectedTemplate?.id || updateTemplateMutation.isPending}
                >
                  <RotateCcw className="mr-2 h-4 w-4" />
                  Reset to Default
                </Button>
                
                <Button 
                  type="submit" 
                  disabled={updateTemplateMutation.isPending}
                >
                  {updateTemplateMutation.isPending ? (
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Save className="mr-2 h-4 w-4" />
                  )}
                  Save Template
                </Button>
              </div>
            </div>
          </form>
        </div>
      </CardContent>
    </Card>
  );
}

// Helper function to get template descriptions
function getTemplateDescription(templateType: string): string {
  switch (templateType) {
    case 'passwordReset':
      return 'Sent to users when they request a password reset.';
    case 'roiAlert':
      return 'Notification sent when a campaign ROI changes significantly.';
    case 'campaignReminder':
      return 'Reminds users to update their campaign performance data.';
    case 'weeklyReport':
      return 'Weekly summary of business performance and analytics.';
    case 'verifyEmail':
      return 'Sent to new users to verify their email address.';
    case 'newAccountRequest':
      return 'Notification to admins about new account approval requests.';
    case 'accountApproved':
      return 'Sent to users when their account has been approved.';
    case 'accountRejected':
      return 'Sent to users when their account has been rejected.';
    default:
      return 'System email template.';
  }
}