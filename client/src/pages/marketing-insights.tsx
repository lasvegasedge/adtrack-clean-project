import { useState, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import AppLayout from "@/components/layout/AppLayout";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, BookOpen, FileText, ListChecks, BarChart, Printer, Download } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Badge } from "@/components/ui/badge";
import ReactMarkdown from 'react-markdown';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

type InsightType = 'summary' | 'detailed' | 'recommendation';

interface MarketingInsightsResponse {
  success: boolean;
  story: string;
  bulletPoints?: string[];
  recommendations?: string[];
  error?: string;
}

export default function MarketingInsights() {
  const { toast } = useToast();
  const [insightType, setInsightType] = useState<InsightType>("summary");
  const storyContentRef = useRef<HTMLDivElement>(null);
  
  // Function to print the marketing insights
  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    if (!printWindow || !insightsMutation.data?.story) return;
    
    const storyContent = insightsMutation.data.story;
    const businessName = business?.name || "Your Business";
    
    printWindow.document.write(`
      <html>
        <head>
          <title>Marketing Insights for ${businessName}</title>
          <style>
            body { font-family: system-ui, -apple-system, sans-serif; padding: 40px; max-width: 800px; margin: 0 auto; }
            h1, h2, h3 { color: #333; }
            h1 { border-bottom: 1px solid #ddd; padding-bottom: 10px; }
            ul { margin-top: 20px; }
            li { margin-bottom: 8px; }
            .footer { margin-top: 30px; border-top: 1px solid #ddd; padding-top: 10px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          ${storyContent.replace(/\n/g, '<br/>')}
          <div class="footer">
            <p>Generated by AdTrack.online | ${new Date().toLocaleString()}</p>
          </div>
          <script>window.onload = function() { window.print(); }</script>
        </body>
      </html>
    `);
    
    printWindow.document.close();
  };
  
  // Function to download marketing insights as PDF
  const handleDownload = async () => {
    if (!storyContentRef.current || !insightsMutation.data?.story) return;
    
    try {
      const element = storyContentRef.current;
      const canvas = await html2canvas(element, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true,
      });
      
      const imageData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });
      
      // Current date and time for PDF metadata
      const currentDate = new Date();
      const formattedDateTime = currentDate.toLocaleString();
      const isoDate = currentDate.toISOString().split('T')[0];
      const businessName = business?.name || "Your Business";
      
      // Set document properties
      pdf.setProperties({
        title: `Marketing Insights for ${businessName}`,
        subject: `Generated on ${formattedDateTime}`,
        creator: 'AdTrack.online',
        author: 'AdTrack Marketing Analytics'
      });
      
      // Add the main content
      const imgWidth = 210;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      pdf.addImage(imageData, 'PNG', 0, 0, imgWidth, imgHeight);
      
      // Add footer with timestamp
      const footerText = `Generated by AdTrack.online | ${formattedDateTime}`;
      const textWidth = pdf.getStringUnitWidth(footerText) * 2.5; // Approximate width
      const textX = (pdf.internal.pageSize.width - textWidth) / 2;
      
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text(footerText, textX, pdf.internal.pageSize.height - 10);
      
      // Save the PDF
      pdf.save(`Marketing_Insights_${businessName.replace(/\s+/g, '_')}_${isoDate}.pdf`);
      
      toast({
        title: "PDF Downloaded",
        description: "Your marketing insights have been saved as a PDF.",
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast({
        title: "Download Failed",
        description: "There was an error creating the PDF file.",
        variant: "destructive",
      });
    }
  };

  // Get the marketing insights
  const insightsMutation = useMutation<MarketingInsightsResponse, Error, InsightType>({
    mutationFn: async (type: InsightType) => {
      const res = await apiRequest(
        "POST", 
        "/api/marketing-insights", 
        { insightType: type }
      );
      
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.message || "Failed to generate marketing insights");
      }
      
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: "Insights Generated",
        description: "Your marketing insights have been generated successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: error.message || "Failed to generate marketing insights",
        variant: "destructive",
      });
    },
  });

  interface Business {
    id: number;
    userId: number;
    name: string;
    type: string;
    location: string;
    radius: number;
    createdAt: string;
  }

  interface Campaign {
    id: number;
    businessId: number;
    name: string;
    adMethodId: number;
    startDate: string;
    endDate: string | null;
    spent: number;
    revenue: number;
    isActive: boolean;
    notes: string | null;
    imageUrl: string | null;
  }

  // Get the business data directly 
  const { data: business } = useQuery<Business>({
    queryKey: ["/api/business"],
  });

  // Get campaigns to show count
  const { data: campaigns } = useQuery<Campaign[]>({
    queryKey: ["/api/business", business?.id, "campaigns"],
    enabled: !!business?.id,
  });

  // Handler for generating insights
  const generateInsights = async (type: InsightType) => {
    setInsightType(type);
    insightsMutation.mutate(type);
  };

  return (
    <AppLayout title="Marketing Insights">
      <div className="max-w-5xl mx-auto">
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-2xl font-bold">Marketing Insights Storyteller</CardTitle>
            <CardDescription>
              Transform your marketing data into clear, actionable narratives with AI-powered insights
            </CardDescription>
          </CardHeader>
          <CardContent>
            <p className="mb-4">
              Select the type of insights you want to generate based on your marketing data from{" "}
              <span className="font-semibold">{business?.name || "your business"}</span>.
            </p>
            
            <div className="flex flex-wrap gap-4 mt-6 mb-8">
              <Button
                variant={insightType === "summary" ? "default" : "outline"}
                className="flex items-center gap-2"
                onClick={() => generateInsights("summary")}
                disabled={insightsMutation.isPending}
              >
                <BookOpen className="h-4 w-4" />
                Quick Summary
              </Button>
              
              <Button
                variant={insightType === "detailed" ? "default" : "outline"}
                className="flex items-center gap-2"
                onClick={() => generateInsights("detailed")}
                disabled={insightsMutation.isPending}
              >
                <FileText className="h-4 w-4" />
                Detailed Analysis
              </Button>
              
              <Button
                variant={insightType === "recommendation" ? "default" : "outline"}
                className="flex items-center gap-2"
                onClick={() => generateInsights("recommendation")}
                disabled={insightsMutation.isPending}
              >
                <ListChecks className="h-4 w-4" />
                Recommendations
              </Button>
            </div>

            {insightsMutation.isPending && (
              <div className="flex flex-col items-center justify-center p-12">
                <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
                <p className="text-lg font-medium">Generating your marketing insights...</p>
                <p className="text-sm text-muted-foreground mt-2">
                  Analyzing {campaigns?.length || "your"} campaigns and market data
                </p>
              </div>
            )}

            {insightsMutation.isError && (
              <div className="bg-destructive/10 p-6 rounded-lg border border-destructive text-center">
                <p className="text-destructive font-semibold mb-2">Error generating insights</p>
                <p>{insightsMutation.error.message}</p>
              </div>
            )}

            {insightsMutation.isSuccess && insightsMutation.data && (
              <div className="mt-4">
                <Tabs defaultValue="story" className="w-full">
                  <TabsList className="mb-4">
                    <TabsTrigger value="story">
                      <BookOpen className="h-4 w-4 mr-2" />
                      Story
                    </TabsTrigger>
                    
                    {insightsMutation.data.bulletPoints && insightsMutation.data.bulletPoints.length > 0 && (
                      <TabsTrigger value="key-points">
                        <BarChart className="h-4 w-4 mr-2" />
                        Key Points
                      </TabsTrigger>
                    )}
                    
                    {insightsMutation.data.recommendations && insightsMutation.data.recommendations.length > 0 && (
                      <TabsTrigger value="recommendations">
                        <ListChecks className="h-4 w-4 mr-2" />
                        Recommendations
                      </TabsTrigger>
                    )}
                  </TabsList>
                  
                  <TabsContent value="story" className="prose prose-gray max-w-none">
                    <div className="flex justify-end mb-3 gap-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="flex items-center gap-1"
                        onClick={handlePrint}
                      >
                        <Printer className="h-4 w-4" />
                        Print
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        className="flex items-center gap-1"
                        onClick={handleDownload}
                      >
                        <Download className="h-4 w-4" />
                        Download PDF
                      </Button>
                    </div>
                    <div ref={storyContentRef} className="bg-card p-6 rounded-lg border shadow-sm">
                      <ReactMarkdown>
                        {insightsMutation.data.story}
                      </ReactMarkdown>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="key-points">
                    <div className="bg-card p-6 rounded-lg border shadow-sm">
                      <h3 className="text-xl font-bold mb-4">Key Takeaways</h3>
                      <ul className="space-y-3">
                        {insightsMutation.data.bulletPoints?.map((point, index) => (
                          <li key={index} className="flex items-start">
                            <Badge variant="default" className="mt-0.5 mr-2 h-6 w-6 flex items-center justify-center rounded-full">
                              {index + 1}
                            </Badge>
                            <span>{point}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="recommendations">
                    <div className="bg-card p-6 rounded-lg border shadow-sm">
                      <h3 className="text-xl font-bold mb-4">Recommended Actions</h3>
                      <ul className="space-y-3">
                        {insightsMutation.data.recommendations?.map((recommendation, index) => (
                          <li key={index} className="flex items-start">
                            <Badge variant="default" className="mt-0.5 mr-2 h-6 w-6 flex items-center justify-center rounded-full">
                              {index + 1}
                            </Badge>
                            <span>{recommendation}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </TabsContent>
                </Tabs>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </AppLayout>
  );
}